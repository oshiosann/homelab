■Management commands
1.Git command
  1-1.Initialize repository
      Create working directory and place .git file (repository data)
      $ git init <Project name>

  1-2.Initialize repository (use existing repository)
      $ mkdir <project name>
      $ cd <project name>
      $ git init

  1-3.Move to staging area
      $ git add <file name>

      $ git add -u
      =>managed file only (new added files are not going to move)

      $ git add -A
      =>All modified files are going to move (all)

      $ git add .
      =>move all modified files (include files in all sub directory) on current directory

  1-4.Check status of file
      $ git status

  1-5.commit to repository
      $ git commit -m "<message>"

      $ git add <file name>
      $ git commit --amend -m "<message>"
      =>update commited data

  1-6.Check log
      $ git log
      =>commit ID on top is latest snapshot(Head)

      $ git log --graph
      =>Display merge log

  1-7.Reset operaton
      $ git reset --soft
      =>Move back Head but staging area and working directory are unchanged

      $ git reset --mixed
      =>Move back Head and staging area but working directory is unchanged (delete files on staging area)
        ※Same as no option

      $ git reset --hard
      =>Move back Head, staging area and working directory

  1-8.Check existing branch
      Marked branch (*) is current branch
      $ git branch

  1-9.Create branch
      $ git branch <branch name>

      $ git branch -b
      =>Create branch and swicth branch at the same time

  1-10.Switch branch
       $ git checkout <branch name>

  1-11.merge commigted branch (develop) to master branch
       $ git checkout master
       =>Move to master branch to be merged
       $ git branch
       develop
       * master
       $ git merge develop
       
  1-12.Clone existing remote repository to local
       git clone git@<IP address of GitLab>:<group name>/<project name>.git
       =>You can see it on project page

  1-13.Check registration of remote repository
       git branch -a
       develop # local
       * master # local
       remotes/gitlab/master # remote

  1-14.Register local repository to remote one
       $ git remote add <remote repository name> git@<IP address of GitLab>:<group name>/<project name>.git
       =>Registration
       $ git remote -v
       =>Check content of the registration

  1-15.Fetch the latest repository(fetch and merge)
       $ git branch
       develop
       * master
       $ git fetch <remote repository name or URL>
       $ git merge FETCH_HEAD
       =>The Latest repository is stored as a snapshot named "FETCH_HEAD"

  1-16.Fetch the latest repository(pull)
       $ git pull <remote repository name> <local repository name e.g. HEAD>

  1-17.Send to remote repository
       $ git push <remote repository name> HEAD

  1-18.git config
       git config(system settings /etc/gitconfig)
       $ git config --system user.name "<name>"
       =>For all user and all repositories (It's just example. set "user" with "--global")
       
       git config(user settings ~/.gitconfig)
       $ git config --global user.name "<name>"
       =>For specific user
       
       (repository settings .git/config)
       => only specific repository

2.Manage process
  2-1.Check status of each processes (all proccesses)
    $ sudo gitlab-ctl status 

    run: alertmanager: (pid 22521) 147426s; run: log: (pid 22390) 147462s
    run: gitaly: (pid 22465) 147435s; run: log: (pid 21841) 147565s
    run: gitlab-exporter: (pid 22498) 147428s; run: log: (pid 22253) 147483s
    run: gitlab-kas: (pid 22474) 147430s; run: log: (pid 22030) 147552s
    run: gitlab-workhorse: (pid 22483) 147429s; run: log: (pid 22161) 147500s
    run: logrotate: (pid 86570) 3579s; run: log: (pid 21773) 147579s
    run: nginx: (pid 22182) 147496s; run: log: (pid 22197) 147495s
    run: node-exporter: (pid 22491) 147429s; run: log: (pid 22240) 147487s
    run: postgres-exporter: (pid 22529) 147426s; run: log: (pid 22412) 147457s
    run: postgresql: (pid 21886) 147561s; run: log: (pid 21949) 147559s
    run: prometheus: (pid 22507) 147427s; run: log: (pid 22342) 147469s
    run: puma: (pid 22082) 147514s; run: log: (pid 22090) 147511s
    run: redis: (pid 21800) 147574s; run: log: (pid 21809) 147573s
    run: redis-exporter: (pid 22500) 147428s; run: log: (pid 22320) 147475s
    run: sidekiq: (pid 22103) 147508s; run: log: (pid 22120) 147505s

    =>"run:" means "running"
    =>"Down:" means "shutdown"

  2-2.Boot GitLab (all processes)
    $ sudo gitlab-ctl start

    ok: run: alertmanager: (pid 88333) 0s
    ok: run: gitaly: (pid 88342) 1s
    ok: run: gitlab-exporter: (pid 88356) 0s
    ok: run: gitlab-kas: (pid 88358) 1s
    ok: run: gitlab-workhorse: (pid 88367) 0s
    ok: run: logrotate: (pid 88376) 1s
    ok: run: nginx: (pid 88382) 0s
    ok: run: node-exporter: (pid 88388) 0s
    ok: run: postgres-exporter: (pid 88393) 1s
    ok: run: postgresql: (pid 88400) 0s
    ok: run: prometheus: (pid 88410) 1s
    ok: run: puma: (pid 88418) 0s
    ok: run: redis: (pid 88424) 1s
    ok: run: redis-exporter: (pid 88431) 0s
    ok: run: sidekiq: (pid 88437) 0s

  1-3.Stop GitLab (all processes)
    $ sudo gitlab-ctl stop

    ok: down: alertmanager: 0s, normally up
    ok: down: gitaly: 0s, normally up
    ok: down: gitlab-exporter: 0s, normally up
    ok: down: gitlab-kas: 0s, normally up
    ok: down: gitlab-workhorse: 0s, normally up
    ok: down: logrotate: 1s, normally up
    ok: down: nginx: 0s, normally up
    ok: down: node-exporter: 1s, normally up
    ok: down: postgres-exporter: 0s, normally up
    ok: down: postgresql: 0s, normally up
    ok: down: prometheus: 1s, normally up
    ok: down: puma: 0s, normally up
    ok: down: redis: 0s, normally up
    ok: down: redis-exporter: 0s, normally up
    ok: down: sidekiq: 1s, normally up

  2-4.Restart GitLab (all proecesses)
    $ sudo gitlab-ctl restart

    ok: run: alertmanager: (pid 88611) 0s
    ok: run: gitaly: (pid 88619) 0s
    ok: run: gitlab-exporter: (pid 88634) 0s
    ok: run: gitlab-kas: (pid 88645) 0s
    ok: run: gitlab-workhorse: (pid 88654) 1s
    ok: run: logrotate: (pid 88664) 0s
    ok: run: nginx: (pid 88670) 0s
    ok: run: node-exporter: (pid 88676) 0s
    ok: run: postgres-exporter: (pid 88683) 0s
    ok: run: postgresql: (pid 88697) 1s
    ok: run: prometheus: (pid 88706) 0s
    ok: run: puma: (pid 88719) 1s
    ok: run: redis: (pid 88724) 0s
    ok: run: redis-exporter: (pid 88731) 0s
    ok: run: sidekiq: (pid 88740) 0s

  2-5.Check status of a specific process
    $ sudo gitlab-ctl status <name of process>
    run: nginx: (pid 88670) 141s; run: log: (pid 22197) 147979s

  2-6.Boot a specific process
    $ sudo gitlab-ctl start <name of process>

  2-7.Stop a specific process
    $ sudo gitlab-ctl stop <name of process>

  2-8.Restart a specific process
    $ sudo gitlab-ctl restart <name of process>

  ---------------------------------------------
  2-9.Reload a specific process(non-stop)
    $ sudo gitlab-ctl hup <name of process>

  2-10.Kill a specific process
    $ sudo gitlab-ctl kill <name of process>
    $ sudo gitlab-ctl start <name of process>
  ---------------------------------------------


3.Reconfigure settings
  Run the command after /etc/gitlab/gitlab.rb
  Change the status into mentainance mode before doing it
  $ sudo gitlab-ctl reconfigure


4.Check logs
  GitLab logs exist on /var/log/gitlab directory however the logs are stored in each process directory.
  You can get latest all logs as standard output by running the command.
  $ sudo gitlab-ctl tail


5.Manage database (PostgreSQL)
  Note: This command is only used on the environment installed Omunibus package

  5-1.Login database
      $ sudo gitlab-psql -d gitlabhq_production
      =>The prompt is changed into "gitlabhq_production=#"
        psql (13.11)
        Type "help" for help.

        Note: The message "could not change directory to "<path>" might be shown when you run the command "gitlab-psql" on directory with lack of permissions,
              it is OK to ignore it. (Or change directory with enough permission and run the command)

  5-2.Display list of database
      gitlabhq_production=#  \l
                                                   List of databases
              Name         |    Owner    | Encoding |   Collate   |    Ctype    |        Access privileges
      ---------------------+-------------+----------+-------------+-------------+---------------------------------
       gitlabhq_production | gitlab      | UTF8     | en_US.UTF-8 | en_US.UTF-8 |
       postgres            | gitlab-psql | UTF8     | en_US.UTF-8 | en_US.UTF-8 |
       template0           | gitlab-psql | UTF8     | en_US.UTF-8 | en_US.UTF-8 | =c/"gitlab-psql"               +
                           |             |          |             |             | "gitlab-psql"=CTc/"gitlab-psql"
       template1           | gitlab-psql | UTF8     | en_US.UTF-8 | en_US.UTF-8 | =c/"gitlab-psql"               +
                           |             |          |             |             | "gitlab-psql"=CTc/"gitlab-psql"
      (4 rows)

  5-3.Display tables of database
      gitlabhq_production=# \d                                          List of relations
       Schema |                              Name                              |       Type        | Owner
      --------+----------------------------------------------------------------+-------------------+--------
       public | abuse_report_events                                            | table             | gitlab
       public | abuse_report_events_id_seq                                     | sequence          | gitlab
       public | abuse_reports                                                  | table             | gitlab
       public | abuse_reports_id_seq                                           | sequence          | gitlab
       public | abuse_trust_scores                                             | table             | gitlab
       public | abuse_trust_scores_id_seq                                      | sequence          | gitlab
       public | achievements                                                   | table             | gitlab
       public | achievements_id_seq                                            | sequence          | gitlab
       public | agent_activity_events                                          | table             | gitlab
      ...

  5-4.Display fields of specific table
      gitlabhq_production=# \d <name of table>
      =>the outoput below is "users" table
                                                                 Table "public.users"
                            Column                    |            Type             | Collation | Nullable |              Def
        ault
        ----------------------------------------------+-----------------------------+-----------+----------+-----------------
        ------------------
         id                                           | integer                     |           | not null | nextval('users_i
        d_seq'::regclass)
         email                                        | character varying           |           | not null | ''::character va
        rying
         encrypted_password                           | character varying           |           | not null | ''::character va
        rying
         reset_password_token                         | character varying           |           |          |
         reset_password_sent_at                       | timestamp without time zone |           |          |
         remember_created_at                          | timestamp without time zone |           |          |
         sign_in_count                                | integer                     |           |          | 0
         current_sign_in_at                           | timestamp without time zone |           |          |
         last_sign_in_at                              | timestamp without time zone |           |          |
         current_sign_in_ip                           | character varying           |           |          |
        ...

  4-5.Exit
      gitlabhq_production=# \q


6.gitlab-rake
  $ sudo gitlab-rake cache:clear:db
  =>Delete database chace
  $ sudo gitlab-rake cache:clear:redis
  =>Delete Redis chace
  $ sudo gitlab-rake app:check
  =>Config check for GitLab Rails
  $ sudo gitlab-rake backup:create
  =>Backup GitLab object
  $ sudo gitlab-rake backup:restore
  =>Restore GitLab object
  $ sudo gitlab-rake check
  =>Config Check for GitLab
  $ sudo gitlab-rake cleanup:repos
  =>Delete Old repository
  $ sudo gitlab-rake env:info
  =>Display env information
  $ sudo gitlab-rake repo:check
  =>Check repository under GitLab environment
  $ sudo gitlab-rake user:check_repos
  =>Check specific user's repository
  $ sudo gitlab-rake import:github
  =>Import GitHub project


DB BACKUP COMMAND NEEDED HERE


■Reference
1.Management user
  git:               Management user of GitLab(default)
  gitlab-www:        Management user which runs WEB proccess such as Nginx
  gitlab-redis:      Management user which runs cantents and services of Redis
  gitlab-psql:       Management user which runs datas and services of PostgreSQL
  gitlab-prometheus: Management user which runs monotoring data and services of Prometheus


2.Directory structure (★ is important)
  /opt/gitlab/:        Directory of GitLab library
    bin/:              Management command of GitLab
    embedded/:         Binaries and failes of each prossess
    etc/:              Environment variable and conf files
    sv/:               runsvdir programs
★/var/opt/gitlab/:    Data directory of GitLab  # manage data with NFS share directory (recommend that using option "root_squash not to create directory as root")
    git-data/:         Repository directory
      repositories/:   Git repository data
    gitlab-ci/
      builds/:         CI build logs
    gitlab-rails/: 
      shared/:         Directory of object
        artifacts/:    Artifacts of CI
        lfs-objects/:  LFS objects
        pages/:        Object of user custumized page
      uploads/:        User attached files
  /etc/gitlab/:        Directory of GitLab user conf file
★  gitlab.rb:         conf file
  /var/log/gitlab/     log dirrectory of GitLab
