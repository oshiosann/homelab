#Tools
#
#kubectx
#kubens

[ansible@dev-mas001v .kube]$ dnf info kube*
Last metadata expiration check: 0:00:05 ago on Wed 20 Sep 2023 04:04:47 PM JST.
Installed Packages
Name         : kubeadm
Version      : 1.27.3
Release      : 0
Architecture : x86_64
Size         : 46 M
Source       : kubelet-1.27.3-0.src.rpm
Repository   : @System
From repo    : kubernetes
Summary      : Command-line utility for administering a Kubernetes cluster.
URL          : https://kubernetes.io
License      : ASL 2.0
Description  : Command-line utility for administering a Kubernetes cluster.

Name         : kubectl
Version      : 1.27.3
Release      : 0
Architecture : x86_64
Size         : 47 M
Source       : kubelet-1.27.3-0.src.rpm
Repository   : @System
From repo    : kubernetes
Summary      : Command-line utility for interacting with a Kubernetes cluster.
URL          : https://kubernetes.io
License      : ASL 2.0
Description  : Command-line utility for interacting with a Kubernetes cluster.

Name         : kubelet
Version      : 1.27.3
Release      : 0
Architecture : x86_64
Size         : 101 M
Source       : kubelet-1.27.3-0.src.rpm
Repository   : @System
From repo    : kubernetes
Summary      : Container cluster management
URL          : https://kubernetes.io
License      : ASL 2.0
Description  : The node agent of Kubernetes, the container cluster manager.

Name         : kubernetes-cni
Version      : 1.2.0
Release      : 0
Architecture : x86_64
Size         : 49 M
Source       : kubelet-1.26.1-0.src.rpm
Repository   : @System
From repo    : kubernetes
Summary      : Binaries required to provision kubernetes container networking
URL          : https://kubernetes.io
License      : ASL 2.0
Description  : Binaries required to provision container networking.






$ kubectl config set-cluster <cluster name> --server=<server information>
$ kubectl config set-credentials <user name> --client-certificate=<path to file> --client-key=<path to file> --namespace=<namespace name>
$ kubectl config set-context <context name> --cluster=<cluster name> --user=<user name> --namespace=<namespace name>
$ kubectl config get-contexts
=>Get context list
$ kubectl config use-context <context name>
=>Switch context
$ kubectl config current-context
=>Get current context name
$ kubectl --context <context name> get pods
=>You can get information of each command by specifying context name




$ kubectl get pods
$ kubectl get pod sample-pod -o yaml
$ kubectl get pods sample-pod -o jsonpath="{.spec.containers[?(@.name == 'nginx-container')].image}"
  nginx:1.17



$ kubectl delete pod <pod name>
$ kubectl delete -f <manifest file name>
$ kubectl delete -f <manifest file name> --wait
=>Wait resource deletion(Finalizers: https://kubernetes.io/docs/concepts/overview/working-with-objects/finalizers/)
$ kubectl delete -f <manifest file name> --force
=>Delete resource forcely(immediately)
$ kubectl delete pod --all



# $ kubectl create -f <manifest file name>
$ kubectl create -f <manifest file name> --save-config
=>Use "kubectl apply" (or "--save-config")
$ kubectl apply -f <manifest file name>
=>If the manifest file has the gap between past one and new one, it is applied. If no resources, create it
  The warning might be shown. "Warning: resource pods/<pod name> is missing the kubectl.kubernetes.io/last-applied-configuration annotation which is required by kubectl apply. kubectl apply should only be used on resources created declaratively by either kubectl create --save-config or kubectl apply. The missing annotation will be patched automatically."
  https://qiita.com/mmorino/items/ad66546c2bd069998377



$ kubectl apply -f <manifest file name> --server-side
=>Enable Server-side apply
$ kubectl set image pod <pod name> nginx-container=nginx:1.17
=>Update nginx mage from 1.16 to 1.17 without running "kubectl apply" (doesn't use manifest file)
$ kubectl apply -f <manifest file name> --server-side --force-conflicts
=>Ignire conflicts and apply
$ kubectl apply -f <manifest file name> --server-side --field-manager <manager name e.g. ci-tool>
=>The value of "manager" under "metadata.managedFields" of resource is set as "kubectl" when using "kubectl".
  It means not distinguishing between using by hands and CI/CD tool. So you can modify the value to detect conflict.

$ kubectl rollout restart deployment <deployment name>
=>You can restart all pod of resource such as deployment (just pod not supportedll)



$ kubectl wait --for=condition=Ready pod/<pod name>
=>Wait for launching <pod name> successfully (Ready state)
$ kubectl wait --for=condition=PodScheduled pod --all
=>Wait by all pods are scheduled (PodScheduled state)
$ kubectl wait --for=delete pod --all --timeout=5s
=>wait max 5 sec per pod until all pods are deleted
$ kubectl delete pod --all --wait=false
=>Delete all pods and don't wait the deletion
$ kubectl wait --for=delete pod --all
=>Wait until all pods are deleted

=> Other resources can be selected and specify manifest file name with -f option
$ kubectl wait --for=condition=Ready -f <manifest file name>


content of manifest file

generateName
=>Give pod name "given prefix + random name" It can only be used by "kubectl create" command (not supported "kubectl apply")
  kind: Pod
  metadata:
    generateName: sample-generatename-
